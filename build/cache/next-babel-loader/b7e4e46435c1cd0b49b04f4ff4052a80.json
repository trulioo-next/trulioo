{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(startup),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(startupFlow),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(StartupSagas);\n\nimport { take, call, put, all } from 'redux-saga/effects';\nimport { delay } from 'redux-saga';\nimport { APP_STARTUP, APP_STARTLOADING, APP_STOPLOADING, APP_SUCCESS, APP_STARTUP_ERROR } from '../types';\n\nfunction startup(isLoaded) {\n  var errors;\n  return _regeneratorRuntime.wrap(function startup$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // test loading\n          console.log('>>> Starting app delayed  - do something');\n          _context.next = 4;\n          return call(delay, 2000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: APP_SUCCESS\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          errors = _context.t0.payload || _context.t0;\n          _context.next = 13;\n          return put({\n            type: APP_STARTUP_ERROR,\n            payload: errors\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\n\n\nfunction startupFlow() {\n  var action;\n  return _regeneratorRuntime.wrap(function startupFlow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 15;\n            break;\n          }\n\n          _context2.next = 3;\n          return take([APP_STARTUP]);\n\n        case 3:\n          action = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: APP_STARTLOADING\n          });\n\n        case 6:\n          if (!(action.type === APP_STARTUP)) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 9;\n          return call(startup, action.payload);\n\n        case 9:\n          _context2.next = 11;\n          return put({\n            type: APP_STOPLOADING\n          });\n\n        case 11:\n          _context2.next = 13;\n          return action;\n\n        case 13:\n          _context2.next = 0;\n          break;\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function StartupSagas() {\n  return _regeneratorRuntime.wrap(function StartupSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([startupFlow()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/stores/startup/sagas.js"],"names":["startup","startupFlow","StartupSagas","take","call","put","all","delay","APP_STARTUP","APP_STARTLOADING","APP_STOPLOADING","APP_SUCCESS","APP_STARTUP_ERROR","isLoaded","console","log","type","errors","payload","action"],"mappings":";;;;yBAYUA,O;;;yBAmBAC,W;;;yBAkBeC,Y;;AAjDzB,SAASC,IAAT,EAAeC,IAAf,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SACEC,WADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,iBALF,QAMO,UANP;;AASA,SAAUZ,OAAV,CAAkBa,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AAJJ;AAKI,iBAAMX,IAAI,CAACG,KAAD,EAAQ,IAAR,CAAV;;AALJ;AAAA;AAQI,iBAAMF,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEL;AAAR,WAAD,CAAT;;AARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWUM,UAAAA,MAXV,GAWmB,YAAIC,OAAJ,eAXnB;AAAA;AAYI,iBAAMb,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEJ,iBAAR;AAA2BM,YAAAA,OAAO,EAAED;AAApC,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;;;AAGA,SAAUhB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAImB,iBAAME,IAAI,CAAC,CAAEK,WAAF,CAAD,CAAV;;AAJnB;AAIUW,UAAAA,MAJV;AAAA;AAMI,iBAAMd,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEP;AAAR,WAAD,CAAT;;AANJ;AAAA,gBAQQU,MAAM,CAACH,IAAP,KAAgBR,WARxB;AAAA;AAAA;AAAA;;AAAA;AASM,iBAAMJ,IAAI,CAACJ,OAAD,EAAUmB,MAAM,CAACD,OAAjB,CAAV;;AATN;AAAA;AAYI,iBAAMb,GAAG,CAAC;AAAEW,YAAAA,IAAI,EAAEN;AAAR,WAAD,CAAT;;AAZJ;AAAA;AAcI,iBAAMS,MAAN;;AAdJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,eAAe,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ,iBAAMI,GAAG,CAAC,CACRL,WAAW,EADH,CAAD,CAAT;;AADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { take, call, put, all } from 'redux-saga/effects'\nimport { delay } from 'redux-saga'\n\nimport {\n  APP_STARTUP,\n  APP_STARTLOADING,\n  APP_STOPLOADING,\n  APP_SUCCESS,\n  APP_STARTUP_ERROR,\n} from '../types'\n\n\nfunction* startup(isLoaded) {\n  try {\n\n    // test loading\n    console.log('>>> Starting app delayed  - do something')\n    yield call(delay, 2000)\n\n    // dispatch success action to app reducer\n    yield put({ type: APP_SUCCESS })\n\n  } catch(err) {\n    const errors = err.payload || err\n    yield put({ type: APP_STARTUP_ERROR, payload: errors})\n  }\n}\n\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\nfunction* startupFlow() {\n  while (true) {\n\n    // watching for authentication actions\n    const action = yield take([ APP_STARTUP ])\n\n    yield put({ type: APP_STARTLOADING })\n\n    if (action.type === APP_STARTUP) {\n      yield call(startup, action.payload)\n    }\n\n    yield put({ type: APP_STOPLOADING })\n\n    yield action\n  }\n}\n\nexport default function* StartupSagas() {\n   yield all([\n     startupFlow(),\n   ])\n}\n"]},"metadata":{},"sourceType":"module"}