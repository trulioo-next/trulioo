{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadAllProductsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(productsFlow),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ProductSagas);\n\nimport { take, call, put, all } from 'redux-saga/effects';\nimport { startListProducts, getListProducts } from './actions';\nimport { ProductService } from '../../services/productService';\nimport { APP_STARTLOADING, APP_STOPLOADING, PRODUCTS_LIST_ALL, PRODUCTS_LIST_ERROR, PRODUCTS_LIST_START } from '../types'; // Load All Products\n//\n\nfunction loadAllProductsSaga() {\n  var response;\n  return _regeneratorRuntime.wrap(function loadAllProductsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(ProductService.getAllProducts, null);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(getListProducts(response.Products));\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          // yield put(error(err))\n          console.log(_context.t0);\n          _context.next = 13;\n          return put({\n            type: PRODUCTS_LIST_ERROR,\n            payload: _context.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\n\n\nfunction productsFlow() {\n  var action;\n  return _regeneratorRuntime.wrap(function productsFlow$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 15;\n            break;\n          }\n\n          _context2.next = 3;\n          return take([PRODUCTS_LIST_START]);\n\n        case 3:\n          action = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: APP_STARTLOADING\n          });\n\n        case 6:\n          if (!(action.type === PRODUCTS_LIST_START)) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 9;\n          return call(loadAllProductsSaga, action.payload);\n\n        case 9:\n          _context2.next = 11;\n          return put({\n            type: APP_STOPLOADING\n          });\n\n        case 11:\n          _context2.next = 13;\n          return action;\n\n        case 13:\n          _context2.next = 0;\n          break;\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //\n\n\nexport default function ProductSagas() {\n  return _regeneratorRuntime.wrap(function ProductSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([productsFlow() //loadAllProductsSaga()\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/stores/products/sagas.js"],"names":["loadAllProductsSaga","productsFlow","ProductSagas","take","call","put","all","startListProducts","getListProducts","ProductService","APP_STARTLOADING","APP_STOPLOADING","PRODUCTS_LIST_ALL","PRODUCTS_LIST_ERROR","PRODUCTS_LIST_START","getAllProducts","response","Products","console","log","type","payload","action"],"mappings":";;;;yBAgBWA,mB;;;yBAkBDC,Y;;;yBAkBeC,Y;;AApDzB,SAASC,IAAT,EAAeC,IAAf,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,WAAnD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,SACEC,gBADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,mBALF,QAMO,UANP,C,CAQA;AACA;;AACA,SAAWd,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIqB,iBAAMI,IAAI,CAACK,cAAc,CAACM,cAAhB,EAAgC,IAAhC,CAAV;;AAJrB;AAIUC,UAAAA,QAJV;AAAA;AAKI,iBAAMX,GAAG,CAACG,eAAe,CAACQ,QAAQ,CAACC,QAAV,CAAhB,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQI;AACAC,UAAAA,OAAO,CAACC,GAAR;AATJ;AAUI,iBAAMd,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEP,mBAAR;AAA6BQ,YAAAA,OAAO;AAApC,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;AAGA,SAAUpB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACS,IADT;AAAA;AAAA;AAAA;;AAAA;AAImB,iBAAME,IAAI,CAAC,CAAEW,mBAAF,CAAD,CAAV;;AAJnB;AAIUQ,UAAAA,MAJV;AAAA;AAMI,iBAAMjB,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAEV;AAAR,WAAD,CAAT;;AANJ;AAAA,gBAQQY,MAAM,CAACF,IAAP,KAAgBN,mBARxB;AAAA;AAAA;AAAA;;AAAA;AASM,iBAAMV,IAAI,CAACJ,mBAAD,EAAsBsB,MAAM,CAACD,OAA7B,CAAV;;AATN;AAAA;AAYI,iBAAMhB,GAAG,CAAC;AAAEe,YAAAA,IAAI,EAAET;AAAR,WAAD,CAAT;;AAZJ;AAAA;AAcI,iBAAMW,MAAN;;AAdJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;;;AACA,eAAe,SAAUpB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ,iBAAMI,GAAG,CAAC,CACRL,YAAY,EADJ,CAER;AAFQ,WAAD,CAAT;;AADY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { take, call, put, all } from 'redux-saga/effects'\n\nimport { startListProducts, getListProducts } from './actions'\n\nimport { ProductService } from '../../services/productService'\n\nimport {\n  APP_STARTLOADING,\n  APP_STOPLOADING,\n  PRODUCTS_LIST_ALL,\n  PRODUCTS_LIST_ERROR,\n  PRODUCTS_LIST_START\n} from '../types'\n\n// Load All Products\n//\nfunction * loadAllProductsSaga () {\n\n  try {\n\n    const response = yield call(ProductService.getAllProducts, null)\n    yield put(getListProducts(response.Products))\n\n  } catch (errors) {\n    // yield put(error(err))\n    console.log(errors);\n    yield put({ type: PRODUCTS_LIST_ERROR, payload: errors})\n  }\n}\n\n\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\nfunction* productsFlow() {\n  while (true) {\n\n    // watching for authentication actions\n    const action = yield take([ PRODUCTS_LIST_START ])\n\n    yield put({ type: APP_STARTLOADING })\n\n    if (action.type === PRODUCTS_LIST_START ) {\n      yield call(loadAllProductsSaga, action.payload)\n    }\n\n    yield put({ type: APP_STOPLOADING })\n\n    yield action\n  }\n}\n//\nexport default function* ProductSagas() {\n   yield all([\n     productsFlow(),\n     //loadAllProductsSaga()\n   ]);\n}"]},"metadata":{},"sourceType":"module"}