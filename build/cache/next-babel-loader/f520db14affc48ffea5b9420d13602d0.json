{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport ErrorHandler from './errorHandler';\n/*\n* Parses the JSON returned by a network request\n*/\n\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) return null;\n  return response.json();\n}\n/*\n* Checks if a network request came back fine, and throws an error if not\n*/\n\n\nfunction checkStatus(_x) {\n  return _checkStatus.apply(this, arguments);\n}\n/*\n* Requests a URL, returning a promise\n*/\n\n\nfunction _checkStatus() {\n  _checkStatus = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(response) {\n    var payload, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(response.status >= 200 && response.status < 300)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", response);\n\n          case 2:\n            _context.next = 4;\n            return response.json();\n\n          case 4:\n            payload = _context.sent;\n            error = new Error(payload.message);\n            error.response = response;\n            error.payload = _objectSpread({}, payload, {\n              errors: payload.errors && _Array$isArray(payload.errors) ? payload.errors : null\n            });\n            throw error;\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkStatus.apply(this, arguments);\n}\n\nexport default function (url, options) {\n  return fetch(url, _objectSpread({\n    mode: 'cors'\n  }, options)).then(checkStatus).then(parseJSON)[\"catch\"](ErrorHandler.network);\n}","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/utils/fetch.js"],"names":["ErrorHandler","parseJSON","response","status","json","checkStatus","payload","error","Error","message","errors","url","options","fetch","mode","then","network"],"mappings":"AAAA;;;;;;AAEA,OAAOA,YAAP,MAAyB,gBAAzB;AAGA;;;;AAGA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,MAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EAAwD,OAAO,IAAP;AACxD,SAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;AAED;;;;;SAGeC,W;;;AAYf;;;;;;;;2BAZA,iBAA2BH,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACMA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GADlD;AAAA;AAAA;AAAA;;AAAA,6CAC8DD,QAD9D;;AAAA;AAAA;AAAA,mBAEwBA,QAAQ,CAACE,IAAT,EAFxB;;AAAA;AAEQE,YAAAA,OAFR;AAGQC,YAAAA,KAHR,GAGgB,IAAIC,KAAJ,CAAUF,OAAO,CAACG,OAAlB,CAHhB;AAIEF,YAAAA,KAAK,CAACL,QAAN,GAAiBA,QAAjB;AACAK,YAAAA,KAAK,CAACD,OAAN,qBACKA,OADL;AAEEI,cAAAA,MAAM,EAAEJ,OAAO,CAACI,MAAR,IAAkB,eAAcJ,OAAO,CAACI,MAAtB,CAAlB,GAAkDJ,OAAO,CAACI,MAA1D,GAAmE;AAF7E;AALF,kBASQH,KATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,eAAe,UAASI,GAAT,EAAcC,OAAd,EAAuB;AACpC,SAAOC,KAAK,CAACF,GAAD;AACVG,IAAAA,IAAI,EAAE;AADI,KAOPF,OAPO,EAAL,CASNG,IATM,CASDV,WATC,EAUNU,IAVM,CAUDd,SAVC,WAWAD,YAAY,CAACgB,OAXb,CAAP;AAYD","sourcesContent":["'use strict'\n\nimport ErrorHandler from './errorHandler'\n\n\n/*\n* Parses the JSON returned by a network request\n*/\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) return null\n  return response.json()\n}\n\n/*\n* Checks if a network request came back fine, and throws an error if not\n*/\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) return response\n  const payload = await response.json()\n  const error = new Error(payload.message)\n  error.response = response\n  error.payload = {\n    ...payload,\n    errors: payload.errors && Array.isArray(payload.errors) ? payload.errors : null,\n  }\n  throw error\n}\n\n/*\n* Requests a URL, returning a promise\n*/\nexport default function(url, options) {\n  return fetch(url, {\n    mode: 'cors',//'no-cors', // 'cors', //'*same-origin'\n    // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    // credentials: \"same-origin\", // include, *same-origin, omit\n    // redirect: \"follow\", // manual, *follow, error\n    // referrer: \"no-referrer\", // no-referrer, *client\n    // body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    ...options\n  })\n  .then(checkStatus)\n  .then(parseJSON)\n  .catch(ErrorHandler.network)\n}\n"]},"metadata":{},"sourceType":"module"}