{"ast":null,"code":"import { take, call, put, all } from 'redux-saga/effects';\nimport { delay } from 'redux-saga';\nimport { APP_STARTUP, APP_STARTLOADING, APP_STOPLOADING, APP_SUCCESS, APP_STARTUP_ERROR } from '../types';\n\nfunction* startup(isLoaded) {\n  try {\n    // test loading\n    console.log('>>> Starting app delayed  - do something');\n    yield call(delay, 2000); // dispatch success action to app reducer\n\n    yield put({\n      type: APP_SUCCESS\n    });\n  } catch (err) {\n    const errors = err.payload || err;\n    yield put({\n      type: APP_STARTUP_ERROR,\n      payload: errors\n    });\n  }\n}\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\n\n\nfunction* startupFlow() {\n  while (true) {\n    // watching for authentication actions\n    const action = yield take([APP_STARTUP]);\n    yield put({\n      type: APP_STARTLOADING\n    });\n\n    if (action.type === APP_STARTUP) {\n      yield call(startup, action.payload);\n    }\n\n    yield put({\n      type: APP_STOPLOADING\n    });\n    yield action;\n  }\n}\n\nexport default function* StartupSagas() {\n  yield all([startupFlow()]);\n}","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/stores/startup/sagas.js"],"names":["take","call","put","all","delay","APP_STARTUP","APP_STARTLOADING","APP_STOPLOADING","APP_SUCCESS","APP_STARTUP_ERROR","startup","isLoaded","console","log","type","err","errors","payload","startupFlow","action","StartupSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SACEC,WADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,WAJF,EAKEC,iBALF,QAMO,UANP;;AASA,UAAUC,OAAV,CAAkBC,QAAlB,EAA4B;AAC1B,MAAI;AAEF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACA,UAAMZ,IAAI,CAACG,KAAD,EAAQ,IAAR,CAAV,CAJE,CAMF;;AACA,UAAMF,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAT;AAED,GATD,CASE,OAAMO,GAAN,EAAW;AACX,UAAMC,MAAM,GAAGD,GAAG,CAACE,OAAJ,IAAeF,GAA9B;AACA,UAAMb,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEL,iBAAR;AAA2BQ,MAAAA,OAAO,EAAED;AAApC,KAAD,CAAT;AACD;AACF;AAED;;;;;AAGA,UAAUE,WAAV,GAAwB;AACtB,SAAO,IAAP,EAAa;AAEX;AACA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAAC,CAAEK,WAAF,CAAD,CAAzB;AAEA,UAAMH,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAT;;AAEA,QAAIa,MAAM,CAACL,IAAP,KAAgBT,WAApB,EAAiC;AAC/B,YAAMJ,IAAI,CAACS,OAAD,EAAUS,MAAM,CAACF,OAAjB,CAAV;AACD;;AAED,UAAMf,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAT;AAEA,UAAMY,MAAN;AACD;AACF;;AAED,eAAe,UAAUC,YAAV,GAAyB;AACrC,QAAMjB,GAAG,CAAC,CACRe,WAAW,EADH,CAAD,CAAT;AAGF","sourcesContent":["import { take, call, put, all } from 'redux-saga/effects'\nimport { delay } from 'redux-saga'\n\nimport {\n  APP_STARTUP,\n  APP_STARTLOADING,\n  APP_STOPLOADING,\n  APP_SUCCESS,\n  APP_STARTUP_ERROR,\n} from '../types'\n\n\nfunction* startup(isLoaded) {\n  try {\n\n    // test loading\n    console.log('>>> Starting app delayed  - do something')\n    yield call(delay, 2000)\n\n    // dispatch success action to app reducer\n    yield put({ type: APP_SUCCESS })\n\n  } catch(err) {\n    const errors = err.payload || err\n    yield put({ type: APP_STARTUP_ERROR, payload: errors})\n  }\n}\n\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\nfunction* startupFlow() {\n  while (true) {\n\n    // watching for authentication actions\n    const action = yield take([ APP_STARTUP ])\n\n    yield put({ type: APP_STARTLOADING })\n\n    if (action.type === APP_STARTUP) {\n      yield call(startup, action.payload)\n    }\n\n    yield put({ type: APP_STOPLOADING })\n\n    yield action\n  }\n}\n\nexport default function* StartupSagas() {\n   yield all([\n     startupFlow(),\n   ])\n}\n"]},"metadata":{},"sourceType":"module"}