{"ast":null,"code":"import { take, call, put, all } from 'redux-saga/effects';\nimport { startListProducts, getListProducts } from './actions';\nimport { ProductService } from '../../services/productService';\nimport { APP_STARTLOADING, APP_STOPLOADING, PRODUCTS_LIST_ALL, PRODUCTS_LIST_ERROR, PRODUCTS_LIST_START } from '../types'; // Load All Products\n//\n\nfunction* loadAllProductsSaga() {\n  try {\n    const response = yield call(ProductService.getAllProducts, null);\n    yield put(getListProducts(response.Products));\n  } catch (errors) {\n    // yield put(error(err))\n    console.log(errors);\n    yield put({\n      type: PRODUCTS_LIST_ERROR,\n      payload: errors\n    });\n  }\n}\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\n\n\nfunction* productsFlow() {\n  while (true) {\n    // watching for authentication actions\n    const action = yield take([PRODUCTS_LIST_START]);\n    yield put({\n      type: APP_STARTLOADING\n    });\n\n    if (action.type === PRODUCTS_LIST_START) {\n      yield call(loadAllProductsSaga, action.payload);\n    }\n\n    yield put({\n      type: APP_STOPLOADING\n    });\n    yield action;\n  }\n} //\n\n\nexport default function* ProductSagas() {\n  yield all([productsFlow() //loadAllProductsSaga()\n  ]);\n}","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/stores/products/sagas.js"],"names":["take","call","put","all","startListProducts","getListProducts","ProductService","APP_STARTLOADING","APP_STOPLOADING","PRODUCTS_LIST_ALL","PRODUCTS_LIST_ERROR","PRODUCTS_LIST_START","loadAllProductsSaga","response","getAllProducts","Products","errors","console","log","type","payload","productsFlow","action","ProductSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,WAAnD;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,SACEC,gBADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,mBAJF,EAKEC,mBALF,QAMO,UANP,C,CAQA;AACA;;AACA,UAAWC,mBAAX,GAAkC;AAEhC,MAAI;AAEF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACK,cAAc,CAACQ,cAAhB,EAAgC,IAAhC,CAA3B;AACA,UAAMZ,GAAG,CAACG,eAAe,CAACQ,QAAQ,CAACE,QAAV,CAAhB,CAAT;AAED,GALD,CAKE,OAAOC,MAAP,EAAe;AACf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMd,GAAG,CAAC;AAAEiB,MAAAA,IAAI,EAAET,mBAAR;AAA6BU,MAAAA,OAAO,EAAEJ;AAAtC,KAAD,CAAT;AACD;AACF;AAGD;;;;;AAGA,UAAUK,YAAV,GAAyB;AACvB,SAAO,IAAP,EAAa;AAEX;AACA,UAAMC,MAAM,GAAG,MAAMtB,IAAI,CAAC,CAAEW,mBAAF,CAAD,CAAzB;AAEA,UAAMT,GAAG,CAAC;AAAEiB,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAT;;AAEA,QAAIe,MAAM,CAACH,IAAP,KAAgBR,mBAApB,EAA0C;AACxC,YAAMV,IAAI,CAACW,mBAAD,EAAsBU,MAAM,CAACF,OAA7B,CAAV;AACD;;AAED,UAAMlB,GAAG,CAAC;AAAEiB,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAT;AAEA,UAAMc,MAAN;AACD;AACF,C,CACD;;;AACA,eAAe,UAAUC,YAAV,GAAyB;AACrC,QAAMpB,GAAG,CAAC,CACRkB,YAAY,EADJ,CAER;AAFQ,GAAD,CAAT;AAIF","sourcesContent":["import { take, call, put, all } from 'redux-saga/effects'\n\nimport { startListProducts, getListProducts } from './actions'\n\nimport { ProductService } from '../../services/productService'\n\nimport {\n  APP_STARTLOADING,\n  APP_STOPLOADING,\n  PRODUCTS_LIST_ALL,\n  PRODUCTS_LIST_ERROR,\n  PRODUCTS_LIST_START\n} from '../types'\n\n// Load All Products\n//\nfunction * loadAllProductsSaga () {\n\n  try {\n\n    const response = yield call(ProductService.getAllProducts, null)\n    yield put(getListProducts(response.Products))\n\n  } catch (errors) {\n    // yield put(error(err))\n    console.log(errors);\n    yield put({ type: PRODUCTS_LIST_ERROR, payload: errors})\n  }\n}\n\n\n/*\n* Startup flow to allow concurrent actions to be dispatched\n*/\nfunction* productsFlow() {\n  while (true) {\n\n    // watching for authentication actions\n    const action = yield take([ PRODUCTS_LIST_START ])\n\n    yield put({ type: APP_STARTLOADING })\n\n    if (action.type === PRODUCTS_LIST_START ) {\n      yield call(loadAllProductsSaga, action.payload)\n    }\n\n    yield put({ type: APP_STOPLOADING })\n\n    yield action\n  }\n}\n//\nexport default function* ProductSagas() {\n   yield all([\n     productsFlow(),\n     //loadAllProductsSaga()\n   ]);\n}"]},"metadata":{},"sourceType":"module"}