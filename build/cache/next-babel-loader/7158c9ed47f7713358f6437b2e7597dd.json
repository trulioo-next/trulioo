{"ast":null,"code":"/**\n * Selectors let us factorize logic that queries the state. Selectors can be used\n * in sagas or components to avoid duplicating that logic.\n */\n// Direct selector to the app state domain\nexport const selectIsLoading = state => {\n  return state.get('root').getIn(['app', 'isLoading']);\n};\nexport const selectIsLoaded = state => {\n  return state.get('root').getIn(['app', 'isLoaded']);\n};\nexport const selectError = state => {\n  return state.get('root').getIn(['app', 'error']);\n};\n/**\n * Other specific selectors\n */\n\nexport const selectIsAuthenticated = state => {\n  return false;\n};\nexport const selectErrorSource = state => {\n  return state.get('root').getIn(['app', 'errorSource']);\n};\nexport default {\n  selectIsLoading,\n  selectIsLoaded,\n  selectError,\n  selectErrorSource,\n  selectIsAuthenticated\n};","map":{"version":3,"sources":["/Applications/AMPPS/www/react-repo-2020-7eleven.ca/stores/app/selectors.js"],"names":["selectIsLoading","state","get","getIn","selectIsLoaded","selectError","selectIsAuthenticated","selectErrorSource"],"mappings":"AAAA;;;;AAKA;AACA,OAAO,MAAMA,eAAe,GAAIC,KAAD,IAAW;AACxC,SAAOA,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBC,KAAlB,CAAwB,CAAC,KAAD,EAAO,WAAP,CAAxB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,cAAc,GAAIH,KAAD,IAAW;AACvC,SAAOA,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBC,KAAlB,CAAwB,CAAC,KAAD,EAAO,UAAP,CAAxB,CAAP;AACD,CAFM;AAIP,OAAO,MAAME,WAAW,GAAIJ,KAAD,IAAW;AACpC,SAAOA,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBC,KAAlB,CAAwB,CAAC,KAAD,EAAO,OAAP,CAAxB,CAAP;AACD,CAFM;AAIP;;;;AAIC,OAAO,MAAMG,qBAAqB,GAAIL,KAAD,IAAW;AAC9C,SAAO,KAAP;AACD,CAFM;AAIP,OAAO,MAAMM,iBAAiB,GAAIN,KAAD,IAAW;AAC1C,SAAOA,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBC,KAAlB,CAAwB,CAAC,KAAD,EAAO,aAAP,CAAxB,CAAP;AACD,CAFM;AAKR,eAAe;AACbH,EAAAA,eADa;AAEbI,EAAAA,cAFa;AAGbC,EAAAA,WAHa;AAIbE,EAAAA,iBAJa;AAKbD,EAAAA;AALa,CAAf","sourcesContent":["/**\n * Selectors let us factorize logic that queries the state. Selectors can be used\n * in sagas or components to avoid duplicating that logic.\n */\n\n// Direct selector to the app state domain\nexport const selectIsLoading = (state) => {\n  return state.get('root').getIn(['app','isLoading'])\n}\n\nexport const selectIsLoaded = (state) => {\n  return state.get('root').getIn(['app','isLoaded'])\n}\n\nexport const selectError = (state) => {\n  return state.get('root').getIn(['app','error'])\n}\n\n/**\n * Other specific selectors\n */\n\n export const selectIsAuthenticated = (state) => {\n   return false\n }\n\n export const selectErrorSource = (state) => {\n   return state.get('root').getIn(['app','errorSource'])\n }\n\n\nexport default {\n  selectIsLoading,\n  selectIsLoaded,\n  selectError,\n  selectErrorSource,\n  selectIsAuthenticated,\n}\n"]},"metadata":{},"sourceType":"module"}